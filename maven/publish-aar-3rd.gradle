/*
⚠️上传第三方AAR、JAR到maven仓库，三方库是在独立的仓库

🚀🚀🚀
1. 将以下代码copy到需要被上传的module的build.gradle中
2. 编译后在IDE侧边gradle视窗:${Module}/Tasks/publishing/，执行publish
🚀🚀🚀

ext {
    maven_artifact_file_path = "./xxx.aar"  //arr的路径
    maven_version = "x.x.x"
    maven_artifactId = "名字"

    maven_description = "描述"
    maven_groupId = "com.xxx.android"
}
apply from: "$build_script_url/maven/publish-aar-3rd.gradle"

*/

// ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ 使用方式 ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑

apply plugin: 'maven-publish'
def maven_build_type = "debug"

publishing {
    publications {
        "${maven_build_type}"(MavenPublication) {
            groupId maven_groupId
            artifactId maven_artifactId
            version maven_version
            artifact maven_artifact_file_path

            // 如需要启用pom，调用方需要下一行代码，目的：加入apply plugin:android,才有debug等buildType
            // apply from: "$build_script_url/build-lib.gradle"，

            // To include project dependencies
//            pom.withXml {
//                def dependencies = asNode().appendNode('dependencies')
//                // maven_build_type 根据build_type上传相应的dependencies.
//                // 如debugImplementation、releaseImplementation等，根据buildType
//                configurations.getByName("${maven_build_type}CompileClasspath").getResolvedConfiguration().getFirstLevelModuleDependencies().each {
//                    def dependency = dependencies.appendNode('dependency')
//                    dependency.appendNode('groupId', it.moduleGroup)
//                    dependency.appendNode('artifactId', it.moduleName)
//                    dependency.appendNode('version', it.moduleVersion)
//                }
//                asNode().appendNode("description", maven_description)
//            }
        }
    }
    repositories {
        // 三方库只有一仓库，没有snapshot和release之分
        maven {
            url maven_3rd_url
            credentials(HttpHeaderCredentials) {
                name = "Private-Token"
                value = maven_3rd_gitLabAccessToken
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}


